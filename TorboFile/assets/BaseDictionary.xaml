<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:convert="clr-namespace:Lemur.Windows.Converters">

	<!-- CONVERTERS -->
	
	<convert:StringArrayToString x:Key="stringSplitter"/>
	<convert:BoolToVisible x:Key="BoolVisibility" />
	<convert:NonNullToVisible x:Key="NonNullToVisible" />
	<convert:IntToVisible x:Key="HasItemsToVisible" />
	<convert:CollectionToVisible x:Key="CollectionToVisible"/>
	<convert:DataSizeToString x:Key="SizeToString"/>
	<convert:InvertBoolConverter x:Key="InvertBool"/>


	<!-- BRUSHES -->
	
	<SolidColorBrush x:Key="BackgroundColor" Color="#FFF0F0F0" />

	<SolidColorBrush x:Key="BackLightBrush" Color="#fff1da"/>
	<SolidColorBrush x:Key="BackMediumBrush" Color="#e9d282" />
	<SolidColorBrush x:Key="BackDarkBrush" Color="#b04a33"/>
	<SolidColorBrush x:Key="ForeDark" Color="#4b473c" />
	<SolidColorBrush x:Key="ForeMedium" Color="#4f6469"/>
	<SolidColorBrush x:Key="BrightHilightBrush" Color="#ffeb01" />

	<SolidColorBrush x:Key="UIBorderBrush" Color="#4b473c" />

	<SolidColorBrush x:Key="ErrorBrush" Color="Red" />
	<SolidColorBrush x:Key="SuccessBrush" Color="Green" />

	<Thickness x:Key="UIBorderThickness">1</Thickness>


	<!--<Style x:Key="AppWindow" TargetType="{x:Type Window}">
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="MinWidth" Value="100"/>
            <Setter Property="MinHeight" Value="48"/>
            - CaptionHeight + ResizeBorderThickness*2 + 2(by me for better number)-

        </Style>-->

	<Style x:Key="AppWindow" TargetType="{x:Type Window}">
		<Setter Property="Background" Value="{StaticResource BackMediumBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource ForeDark}"/>
	</Style>



	<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
	<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
	<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
	<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
	<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
	<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

	<!-- Apparently changes the style of StdButton on focus. Probably part of the basic button template. -->
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="StdButton" TargetType="{x:Type Button}">
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="FontSize" Value="10"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
							<Setter Property="Background" TargetName="border" Value="{StaticResource BackLightBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
							<Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" TargetName="contentPresenter" Value="0.7"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type Button}" x:Key="IconButton">
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="MinHeight" Value="24"/>
		<Setter Property="MinWidth" Value="24"/>

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="Red"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<ControlTemplate x:Key="ErrorTemplate">
		<StackPanel>
			<AdornedElementPlaceholder />
			<TextBlock Text="{Binding [0].ErrorContent}" Foreground="Red" />
		</StackPanel>
	</ControlTemplate>

	
</ResourceDictionary>